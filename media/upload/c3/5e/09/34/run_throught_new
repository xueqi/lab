#!/bin/csh

# Here we already have box files from boxer, in scans directory. also have all  micrographs

# make links to mic directory

[xl256@compute-23-3 from_0]$ mkdir mic
[xl256@compute-23-3 from_0]$ ls
total 64
lrwxrwxrwx 1 xl256 sindelar   44 Jan 21 16:33 scans -> /data2/sindelar/kaifeng/MB1_ADP_022414/scans
drwxr-xr-x 2 xl256 sindelar 2048 Jan 26 11:19 mic

[xl256@compute-23-3 from_0]$ cd mic

# the micrographs should be in ${prefix}%d.${suffix} format, so modify the script below to get the correct symlink.
[xl256@compute-23-3 mic]$ python
Python 2.7.3 (default, Jul 30 2013, 15:07:49) 
[GCC 4.1.2 20080704 (Red Hat 4.1.2-54)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> import os

>>> for i in range(1, 177):
...  os.symlink('../scans/0%03d.mrc' % i,  'mic%d.mrc' % i)
... 
>>> exit()

[xl256@compute-23-3 mic]$ ls
total 5632
lrwxrwxrwx 1 xl256 sindelar 17 Jan 26 11:21 mic2.mrc -> ../scans/0002.mrc
lrwxrwxrwx 1 xl256 sindelar 17 Jan 26 11:21 mic1.mrc -> ../scans/0001.mrc
lrwxrwxrwx 1 xl256 sindelar 17 Jan 26 11:21 mic3.mrc -> ../scans/0003.mrc
...
lrwxrwxrwx 1 xl256 sindelar 17 Jan 26 11:21 mic174.mrc -> ../scans/0174.mrc
lrwxrwxrwx 1 xl256 sindelar 17 Jan 26 11:21 mic175.mrc -> ../scans/0175.mrc
lrwxrwxrwx 1 xl256 sindelar 17 Jan 26 11:21 mic176.mrc -> ../scans/0176.mrc

# 

[xl256@compute-23-3 mic]$ cd ..

# this step takes a lot of tries to get success. critical is that the f_stop parameter should set to 0.167 1/A, which corresponds to 6A. 0.1, 0.06 does not work for f_stop. f_start should not set. Any parameter for f_start would fail to get correct (even close) defocus.

[xl256@compute-23-3 from_0]$ mpirun -np 64 sxcter.py rotationalpowerspectra ctfestimates --indir=mic --nameroot=mic --micsuffix=mrc --wn=512 --apix=1.86706 --Cs=2 --voltage=200 --ac=7 --f_stop=0.16 --MPI

[xl256@compute-23-3 from_0]$ ls
total 576
lrwxrwxrwx 1 xl256 sindelar    44 Jan 21 16:33 scans -> /data2/sindelar/kaifeng/MB1_ADP_022414/scans
drwxr-xr-x 2 xl256 sindelar 12288 Jan 26 11:21 mic
drwxr-xr-x 2 xl256 sindelar 12288 Jan 28 11:30 rotationalpowerspectra
drwxr-xr-x 2 xl256 sindelar  2048 Jan 28 11:30 ctfestimates

# the script to compare the result from sxcter and the result from frealign
[xl256@compute-23-3 from_0]$ cat compare_ctf.py 
import os
f = open('ctfestimates/partres').read().strip().split("\n")
for i in range(1, 177):
    if i > len(f): break
    f1 = open('scans/%04d_ctf_doc.spi' % i).read().strip("\n").split()[2:]
    f2 = f[i - 1].split()
    print f2[0], (float(f1[0]) + float(f1[1]) ) / 20000

# so you can see they are close now, but there is differences. col 1 is from sxcter, col 2 is from frealign.
# TODO: generate the comparation of the predicted CTF ring and exp CTF ring
[xl256@compute-23-3 from_0]$ python compare_ctf.py 
2.3805 2.511142
2.1178 2.5960025
2.4569 2.6710545
2.4386 1.9139415
2.6219 2.006612
1.857 2.1440395
1.9304 2.093984
1.8764 2.117191
2.1815 2.184269
2.1579 2.331686
2.2862 2.416576
2.8408 2.265023
2.4212 6.06563
2.4643 2.0459075
2.5622 2.2566445
2.6977 2.2614515
2.6888 2.2906595
4.5316 2.279186
3.6108 2.4033195
2.0927 2.487145
2.1641 2.4531835
2.1139 7.1712845
2.1451 2.048465
1.8221 1.973784
1.806 7.0176945
2.2736 4.324422
2.2881 6.9103245
2.3636 6.238401
2.5044 5.4695725
2.5188 6.7127415
2.8737 3.9954705
2.6833 3.7497615
4.1335 3.128406
2.1413 2.3325505
2.2867 2.352128
2.1074 2.496937
1.8192 2.567271
1.8469 2.631431
1.4733 1.902879
2.1542 1.8322805
2.1027 1.950567
2.4395 2.1107085
2.4463 2.0879375
2.3814 2.177561
2.4847 2.180109
1.944 2.1972825
2.7317 2.1580095
1.8657 2.3064815
1.8788 2.3308385
1.7815 2.4263625
2.1306 2.539819
1.7686 2.6983285
2.4562 1.7941805
2.5238 1.9812705
2.6281 1.9734735
2.5342 2.129843
2.2352 1.944341
2.5168 2.1637135
2.5967 2.217081
2.5101 2.37427
2.4109 2.4086125
1.9518 6.082672
1.9742 2.6115785
2.1161 2.518681
2.0939 1.7294955
2.22 1.8881545
2.1769 2.0957045
2.0633 2.1245565
1.977 2.007526
2.396 2.0020115
2.422 2.085587
2.5511 2.101262
5.6425 2.266097
5.6433 2.3510265
6.5674 2.267771
5.3926 2.4143955
5.4237 2.3611975
5.3483 1.696993
2.9801 1.6758505
2.674 1.811928
2.0456 1.8683875
3.1674 1.920696
2.9868 1.99195
2.2841 2.1972405
2.28 2.1686235
2.3666 2.257749
2.3976 2.366536
2.3978 2.423557
2.58 2.530526
2.4294 2.566028
2.791 1.790726
7.1842 1.9133275
2.0516 1.898714
2.0252 2.0084255
3.2947 2.185907
4.3114 2.216181
6.9691 2.145237
6.1859 2.22171
5.5183 2.3370645
2.3788 2.544343
6.6948 2.424337
4.0077 2.746805
3.7739 1.8540235
3.1349 1.9087635
2.0708 2.1043585
2.2203 2.1537035
2.5128 2.123089
2.5469 2.2750465
2.5987 2.373272
1.7444 2.455244
1.8138 2.5021045
1.8074 2.6645665
1.8921 2.642107
2.1255 2.6517065
2.1111 2.710583
2.8038 2.056198
3.5663 2.1256615
2.4678 2.177114
2.1819 2.1452155
2.3475 2.280078
2.3525 2.275695
2.0484 2.254618
2.3466 2.372817
2.4912 2.567177
2.7086 2.612688
1.8059 2.8329225
2.0035 2.650614
1.7343 5.467337
2.1424 2.1151085
1.959 2.0827865
2.1703 2.1244195
2.2899 2.148381
2.6241 1.4357255
4.9121 2.124956
5.333 2.1954335
4.6072 2.5113525
2.7427 2.5031975
2.56 2.5305215
1.639 2.653694
1.8737 2.7296485
2.0937 2.082868
2.1194 1.9790755
1.9028 2.08049
2.0986 2.2286105
2.0917 2.339303
2.1038 2.456173
2.1293 2.433558
1.9887 2.6330675
2.3824 2.5488455
2.3937 2.494391
2.4599 2.6088065
3.6994 2.5358945
2.4893 2.5871345
2.5955 1.9296195
2.266 1.9554575
5.166 2.082584
5.1514 2.080967
1.9204 2.2200125
1.8823 2.385271
1.9751 2.2675665
2.0431 2.3833045
2.0532 2.4276495
2.3741 2.508743
2.4242 2.568902
2.5603 2.6552825
2.2678 2.536738
2.5799 2.165947
1.7364 2.067584
1.7167 2.0429525
1.917 2.004808
2.0565 2.0156095
2.0262 2.0820315
2.081 2.258386
2.1627 2.270837
2.2336 2.3950165
2.3694 2.504821

cat ctfestimates/partres* > ctfestimates/ctfs.txt

##  The output file contains results of CTF parameters estimation.  For each micrograph we have:
## Column:   1             2          3             4              5                 6                    7                          8
##         defocus (um)  Cs (mm)   voltage (kV)  pixel size (A)  B-factor (A^2)  amp contrast (%)  astigmatism amplitude (um)  astigmatism angle

## continued            9                       10                   11
##           std dev of defocus (um)    std dev of ast amp (A)  std dev od ast angle (degrees) 

## continued                                                                             12                         13                    14
##           frequency at which signal drops by 50% due to estimated error of   defocus alone (1/A)  defocus and astigmatism (1/A)       mic name


# So here we have ctf parameters. 

# And we have box files from boxer, and box list for each filaments.

# We need to convert the box files to sxhelixboxer file (tried again, seems to be the same. The corrdinate format is x - w/2, y - h/2, w, h, where x, y is the center of the particle in boxer, and the axis start/end point of the helix in sxhelixboxer. So just extract the helix start and end information from boxer file, to sxhelixboxer file)





## Window segments from boxed helices
## 10/02/2014 - the astigmatism has been implemeneted correctly.
## For more information on the windowing utility, see http://sparx-em.org/sparxwiki/windowallmic
sxhelixboxer.py outdir --window --dirid='mic' --micid='mic' --micsuffix='mrc' --apix=1.867 --boxsize=300 --hcoords_suffix="_boxes.txt" --ptcl-dst=15 --rmax=64.0 --importctf=ctfestimates/ctfs.txt --astigmatismerror=0.5


## To window selected helices (long-boxes) do the following:
##  sxhelixboxer.py mic/mic0.hdf --db-set-hcoords=mic/mic0_boxes.txt --helix-width=200
##  sxhelixboxer.py mic/mic0.hdf --helix-images=heli0.hdf

## Segments from individual filaments are stored as individual entries in the bdb data base in the directory mic/outdir
## They have to be concatenated to create a single (meta)file
e2bdb.py mic/outdir  --makevstack=bdb:adata --filt=QT

## In order to verify settings one can use command:
## sxheader.py bdb:adata --params=ctf --print

##  Compute 2D average power spectrum - examine layer lines pattern
sxprocess.py bdb:adata ppw.hdf --pw --wn=1024
##  e2display.py ppw.hdf &

## Generate 2D mask for centering EM images
## Output: 2D mask written to output file name provided (mask2d.hdf)
sxhelical_demo.py mask2d.hdf --generate_mask --masksize="300,300" --maskwidth=70

## center all the EM images
## centering parameters will be saved in header, the input images will not be changed.


mpirun -np 64 sxshiftali.py bdb:adata mask2d.hdf --oneDx --search_rng=10 --maxit=20 --MPI

##  To verify the outcome:
##  e2display.py tavg.hdf

## Apply the centering parameters stored in the header of each image in bdb:adata to the image, 
## normalize using average and standard deviation outside the mask, and save the centered and normalized image to bdb:data
## Input: Input stack containing 2D alignment parameters in the header (bdb:adata)
# #       Name of 2D mask to use for normalization
## Output: Stack of images (bdb:data) after applying 2D alignment parameters to the images in input stack. 
sxtransform2d.py bdb:adata bdb:data


## generate initial volume for later helical refinement
## Output: A noisy cylinder written to the output file name (inivol.hdf).
sxhelical_demo.py inivol.hdf --generate_noisycyl --boxsize="300,300,300" --rad=70

##refinement without out of plane tilt
sxheader.py bdb:data --params=xform.projection --zero
sxheader.py bdb:data --params=active --one

## Ab initio determination of the structure.  Note parameters are mainly in Angstroms.  Use help (sxhelicon.py -h) for details
mpirun -np 64 sxhelicon.py bdb:data inivol.hdf result_a --apix=1.867 --searchxshift=3.68 --xwobble=1.84 --ywobble=0 --phiwobble=1.64 --delta=1.64 --maxit=10 --dp=27.44 --dphi=167.1 --psi_max=7 --rmin=0 --rmax=100 --fract=0.085 --function="[.,nofunc,helical3c]" --CTF --seg_ny=300


## Refinement with out-of-plane tilt.  Note parameters are mainly in Angstroms.  Use help (sxheliconlocal.py -h) for details
sxheader.py bdb:data --import=result_a/parameters0010.txt --params=xform.projection
sxheader.py bdb:data --params=active --one

# Here I have problem with one filament. Always the setfilori_SP detect one has inverse direction in this filament. So I remove that filament, and copy other filaments to bdb:data1

mpirun -np 64 sxheliconlocal.py bdb:data1 result_a/volf010.hdf result_b --CTF --seg_ny=300 --ou=250 --fract=0.085 --psi_max=7.0 --delta=1.64 --maxit=5 --function="[.,nofunc,helical3c]" --xr=3.68 --txs=1.84 --an=7 --ynumber=16 --dp=27.44 --dphi=167.1 --apix=1.867 --rmin=0.0 --rmax=150  --initial_theta=85.0 --delta_theta=5.0 --y_restrict=3.68


## To calculate fsc of helical structures, the stack of 2D projections must be divided into two separate stacks according to filament membership so that
## 2D projections originating from the same filament are put into the same stack. 
## The following command generates two lists of image IDs which can be used to divide the projection stack into two such stacks. 
## The input arguments --filament_attr specifies the attribute that filament membership is stored under, and --hfsc specifies the prefix of the two text files containing the image IDs which the program will output. 
## In the example below, the program will look for filament membership under the attribute 'filament' of each 2D projection image, and it will output
## two text files, imglist_even and imglist_odd, which can be used to divide the image stack for fsc calculation.

sxhelicon_utils.py bdb:data1 --hfsc='imglist' --filament_attr=filament
mpirun -np 64 sxrecons3d_n.py  bdb:data1  result_b/volodd.hdf  --CTF  --list=imglist_odd.txt --MPI
mpirun -np 64 sxrecons3d_n.py  bdb:data1  result_b/voleven.hdf  --CTF  --list=imglist_even.txt --MPI

##  Helicise volumes
sxhelicon_utils.py result_b/volodd.hdf result_b/voloddh.hdf --helicise --dp=27.44 --dphi=167.1 --fract=0.085 --rmax=150 --rmin=0 --apix=1.867
sxhelicon_utils.py result_b/voleven.hdf result_b/volevenh.hdf --helicise --dp=27.44 --dphi=167.1 --fract=0.085 --rmax=150 --rmin=0 --apix=1.867 

sximgstat.py result_b/voloddh.hdf result_b/volevenh.hdf --fsc=result_b/fsc.txt
# plot column #2 (FSC) versus #1 (absolute spatial frequency, the resolution is given at a point at which FSC drops below 0.5 and is calculated as (pixel size in A)/(abs freq)

#  To search for helical symmetry:
mpirun -np 64 sxrecons3d_n.py  bdb:data1  result_b/volfull.hdf  --CTF  --MPI
mpirun -np 64 sxhelicon_utils.py result_b/volfull.hdf outsymsearch --symsearch --dp=27.44 --dphi=167.1 --apix=1.867 --fract=0.65 --rmin=0 --rmax=150 --datasym=datasym.txt  --dp_step=0.92 --ndp=3 --dphi_step=0.25 --ndphi=10 --MPI



# remove defocus larger than 3.5 smaller than 1.5 and get 29339 particles from bdb:data to bdb:data2
# and change dtheta to 1 
# redo local search
mpirun -np 64 sxheliconlocal.py bdb:data2 result_a/volf010.hdf result_b1 --CTF --seg_ny=300 --ou=250 --fract=0.085 --psi_max=7.0 --delta=1.64 --maxit=5 --function="[.,nofunc,helical3c]" --xr=3.68 --txs=1.84 --an=7 --ynumber=16 --dp=27.44 --dphi=167.1 --apix=1.867 --rmin=0.0 --rmax=160  --initial_theta=85.0 --delta_theta=1.0 --y_restrict=3.68

# iteration 2 does not finish overnight, change delta_theta back to 5

mpirun -np 64 sxheliconlocal.py bdb:data2 result_a/volf010.hdf result_b2 --CTF --seg_ny=300 --ou=250 --fract=0.085 --psi_max=7.0 --delta=1.64 --maxit=5 --function="[.,nofunc,helical3c]" --xr=3.68 --txs=1.84 --an=7 --ynumber=16 --dp=27.44 --dphi=167.1 --apix=1.867 --rmin=0.0 --rmax=160  --initial_theta=85.0 --delta_theta=5.0 --y_restrict=3.68

sxhelicon_utils.py bdb:data2 --hfsc='imglist2' --filament_attr=filament
mpirun -np 64 sxrecons3d_n.py  bdb:data2  result_b2/volodd.hdf  --CTF  --list=imglist2_odd.txt --MPI
mpirun -np 64 sxrecons3d_n.py  bdb:data2  result_b2/voleven.hdf  --CTF  --list=imglist2_even.txt --MPI

##  Helicise volumes
sxhelicon_utils.py result_b2/volodd.hdf result_b2/voloddh.hdf --helicise --dp=27.44 --dphi=167.1 --fract=0.085 --rmax=150 --rmin=0 --apix=1.867
sxhelicon_utils.py result_b2/voleven.hdf result_b2/volevenh.hdf --helicise --dp=27.44 --dphi=167.1 --fract=0.085 --rmax=150 --rmin=0 --apix=1.867 

sximgstat.py result_b2/voloddh.hdf result_b2/volevenh.hdf --fsc=result_b2/fsc.txt

# even worse resultions. maybe need do from global search


# make 300x300x300 volume from actomyosin_138_050A
e2proc3d.py actomyosin_138_050A.hdf actomyosin_300_050A.hdf --clip=300 --scale=3 
# copy the intial data
sxheader.py bdb:data2 --params=active --one
sxheader.py bdb:data2 --params=xform.align2d --zero

sxtransform2d.py bdb:data2 bdb:data3

sxheader.py bdb:data3 --params=xform.projection --zero
sxheader.py bdb:data3 --params=active --one

mpirun -np 64 sxhelicon.py bdb:data3 helicon_actomycin_50A_300A/actomyosin_300_050A.hdf helicon_actomycin_50A_300A/result_a --apix=1.867 --searchxshift=3.68 --xwobble=1.84 --ywobble=0 --phiwobble=1.64 --delta=1.64 --maxit=10 --dp=27.44 --dphi=167.1 --psi_max=7 --rmin=0 --rmax=100 --fract=0.085 --function="[.,nofunc,helical3c]" --CTF --seg_ny=300

sxheader.py bdb:data3 --import=helicon_actomycin_50A_300A/result_a/parameters0010.txt --params=xform.projection
sxheader.py bdb:data3 --params=active --one

mpirun -np 64 sxheliconlocal.py bdb:data3 helicon_actomycin_50A_300A/result_a/volf010.hdf helicon_actomycin_50A_300A/result_b --CTF --seg_ny=300 --ou=150 --fract=0.085 --psi_max=7.0 --delta=1.64 --maxit=5 --function="[.,nofunc,helical3c]" --xr=3.68 --txs=1.84 --an=7 --ynumber=16 --dp=27.44 --dphi=167.1 --apix=1.867 --rmin=0.0 --rmax=150  --initial_theta=85.0 --delta_theta=5.0 --y_restrict=3.68

# evaluate the resolution

sxhelicon_utils.py bdb:data3 --hfsc='imglist3' --filament_attr=filament
mpirun -np 64 sxrecons3d_n.py  bdb:data3  helicon_actomycin_50A_300A/result_b/volodd.hdf  --CTF  --list=imglist3_odd.txt --MPI
mpirun -np 64 sxrecons3d_n.py  bdb:data3  helicon_actomycin_50A_300A/result_b/voleven.hdf  --CTF  --list=imglist3_even.txt --MPI

##  Helicise volumes
sxhelicon_utils.py helicon_actomycin_50A_300A/result_b/volodd.hdf  helicon_actomycin_50A_300A/result_b/voloddh.hdf --helicise --dp=27.44 --dphi=167.1 --fract=0.085 --rmax=150 --rmin=0 --apix=1.867
sxhelicon_utils.py helicon_actomycin_50A_300A/result_b/voleven.hdf  helicon_actomycin_50A_300A/result_b/volevenh.hdf --helicise --dp=27.44 --dphi=167.1 --fract=0.085 --rmax=150 --rmin=0 --apix=1.867 

sximgstat.py helicon_actomycin_50A_300A/result_b/voloddh.hdf helicon_actomycin_50A_300A/result_b/volevenh.hdf --fsc=helicon_actomycin_50A_300A/result_b/fsc.txt
# try dtheta = 2 again, also increate the rmax to 180, ou to 180
sxheader.py bdb:data3 --import=helicon_actomycin_50A_300A/result_b/parameters0005.txt --params=xform.projection
sxheader.py bdb:data3 --params=active --one

mpirun -np 64 sxheliconlocal.py bdb:data3 helicon_actomycin_50A_300A/result_b/volf0005.hdf helicon_actomycin_50A_300A/result_c --CTF --seg_ny=300 --ou=180 --fract=0.085 --psi_max=7.0 --delta=1.64 --maxit=5 --function="[.,nofunc,helical3c]" --xr=3.68 --txs=1.84 --an=7 --ynumber=16 --dp=27.44 --dphi=167.1 --apix=1.867 --rmin=0.0 --rmax=180  --initial_theta=85.0 --delta_theta=2.0 --y_restrict=3.68


sxhelicon_utils.py bdb:data3 --hfsc='imglist3_1' --filament_attr=filament
mpirun -np 64 sxrecons3d_n.py  bdb:data3  helicon_actomycin_50A_300A/result_c/volodd.hdf  --CTF  --list=imglist3_1_odd.txt --MPI
mpirun -np 64 sxrecons3d_n.py  bdb:data3  helicon_actomycin_50A_300A/result_c/voleven.hdf  --CTF  --list=imglist3_1_even.txt --MPI

sxhelicon_utils.py helicon_actomycin_50A_300A/result_c/volodd.hdf  helicon_actomycin_50A_300A/result_c/voloddh.hdf --helicise --dp=27.44 --dphi=167.1 --fract=0.085 --rmax=180 --rmin=0 --apix=1.867
sxhelicon_utils.py helicon_actomycin_50A_300A/result_c/voleven.hdf  helicon_actomycin_50A_300A/result_c/volevenh.hdf --helicise --dp=27.44 --dphi=167.1 --fract=0.085 --rmax=180 --rmin=0 --apix=1.867 
sximgstat.py helicon_actomycin_50A_300A/result_c/voloddh.hdf helicon_actomycin_50A_300A/result_c/volevenh.hdf --fsc=helicon_actomycin_50A_300A/result_b/fsc.txt

